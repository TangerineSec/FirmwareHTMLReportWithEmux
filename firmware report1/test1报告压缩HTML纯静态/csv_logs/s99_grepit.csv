Grepit test;Number of results;Used args for grep;Regex used;Grepit comment;
4_android_system_path;157;;/system;/system is the path where a lot of binaries are stored. So whenever an Android app does something like executing a binary such as /system/xbin/which with an absolut path. Often used in root-detection mechanisms.;
4_apikeys_TOKEN;17;;TOKEN;TOKEN environment variable;
5_c_malloc;11;;malloc\(;malloc. Rather rare bug, but see issues CVE-2010-0041 and CVE-2010-0042. Uninitialized memory access issues? Could also happen in java/android native code. Also developers should check return codes.;
5_c_realloc;16;;realloc\(;realloc. Rather rare bug, but see issues CVE-2010-0041 and CVE-2010-0042. Uninitialized memory access issues? Could also happen in java/android native code. Also developers should check return codes.;
4_cryptocred_crypt_call;5;-i;crypt\(;Crypt (the method itself) can be dangerous, also matches any calls to decrypt(, encrypt( or whatevercrypt(, which is desired;
5_cryptocred_ciphers_rc2;92;-i;RC2;RC2 cipher. Security depends heavily on usage and what is secured.;
5_cryptocred_ciphers_rc4;81;;RC4;RC4 cipher. Security depends heavily on usage and what is secured.;
5_c_insecure_c_functions_sprintf_snprintf;5;;snprintf\(;Buffer overflows and format string vulnerable methods: sprintf --> snprintf, vsprintf --> vsnprintf;
4_cryptocred_ciphers_crc32;48;-i;CRC32;CRC32 is a checksum algorithm. Security depends heavily on usage and what is secured.;
7_cryptocred_ciphers_des;227;;DES;DES cipher. Security depends heavily on usage and what is secured.;
5_c_insecure_c_functions_gets;5;;gets\(;Buffer overflows and format string vulnerable methods: gets --> fgets;
5_cryptocred_ciphers_md2;23;;MD2;MD2. Security depends heavily on usage and what is secured.;
5_c_random;46;;random\(;Random is not a secure random number generator;
5_cryptocred_ciphers_md5;190;;MD5;MD5. Security depends heavily on usage and what is secured.;
3_dotnet_unsafe_declaration;11;;unsafe\s;If you declare a variable 'unsafe' in .NET you can do pointer arythmetic and therefore introduce buffer overflows etc. again;
4_dotnet_marshal;5;;Marshal;If you use Marshal in .NET you use an unsafe API and therefore you could introduce buffer overflows etc. again.;
4_cryptocred_ciphers_sha1_uppercase;77;;SHA-?1;SHA1. Security depends heavily on usage and what is secured.;
4_cryptocred_ciphers_sha1_lowercase;120;;sha-?1;SHA1. Security depends heavily on usage and what is secured.;
4_cryptocred_ciphers_sha256;75;-i;SHA-?256;SHA256. Security depends heavily on usage and what is secured.;
4_dotnet_unchecked;100;;unchecked;unchecked allows to disable exceptions for integer overflows, see https://sonarqube.com/coding_rules#types=VULNERABILITY|languages=cs;
4_cryptocred_ciphers_sha512;58;-i;SHA-?512;SHA256. Security depends heavily on usage and what is secured.;
4_cryptocred_ciphers_PBKDF2;40;-i;PBKDF2;PBKDF2. Security depends heavily on usage and what is secured.;
4_cryptocred_ciphers_hmac;192;-i;HMAC;HMAC. Security depends heavily on usage and what is secured.;
4_cryptocred_ciphers_ntlm;44;;NTLM;NTLM. Security depends heavily on usage and what is secured.;
4_cryptocred_ciphers_kerberos;28;-i;kerberos;Kerberos. Security depends heavily on usage and what is secured.;
6_cryptocred_hash;1045;-i;hash(?!(table|map|set|code));Hash;
1_cryptocred_passwd_or_shadow_files;38;-i;[^:]{3,20}:[^:]{1,200}:\d{0,20}:\d{0,20}:[^:]{0,200}:[^:]{0,200}:[^:]*$;Find *nix passwd or shadow files.;
6_flex_trace;17;;trace\(;Flex Flash has trace to output debug info, see https://sonarqube.com/coding_rules#types=VULNERABILITY|languages=flex;
2_cryptocred_encryption_key;221;-i;encrypt.{0,20}key;Encryption key and variants of it;
4_cryptocred_dev_random;136;;/dev/u?random;Sources of entropy: /dev/random and /dev/urandom;
1_cryptocred_certificates_and_keys_narrow_private-key;19;;PRIVATE KEY;Narrow search for certificate and keys specifics of base64 encoded format;
2_cryptocred_certificates_and_keys_narrow_public-key;11;;PUBLIC KEY;Narrow search for certificate and keys specifics of base64 encoded format;
5_cryptocred_certificates_and_keys_wide_private-key;162;-i;PRIVATE.{0,20}KEY;Wide search for certificate and keys specifics of base64 encoded format;
5_cryptocred_certificates_and_keys_wide_public-key;180;-i;PUBLIC.{0,20}KEY;Wide search for certificate and keys specifics of base64 encoded format;
6_cryptocred_salt1;58;;[Ss]alt;Salt for a hashing algorithm?;
6_cryptocred_salt2;5;;SALT;Salt for a hashing algorithm?;
2_general_html_templating;3350;;<%=;A generic templating pattern that is used in HTML generation of Java (JSP), Ruby and client-side JavaScript libraries.;
2_general_superuser;11;-i;super.?user;Superuser. Sometimes the root user of *nix is referenced, sometimes it is about root detection on mobile phones (e.g. Android Superuser.apk app detection);
4_cryptocred_password;1542;-i;pass.?wo?r?d;Password and variants of it;
3_cryptocred_verify_password;5;-i;verify.?pass.?wo?r?d;Password verification methods, interesting to see if timing ;
2_general_no_root_squash;17;;no_root_squash;no_root_squash allows NFS clients to connect as root and for example plant suid binaries on the server, that if executed by any user exploit the server as root;
2_general_sec_equals_sys;5;;sec=sys;sec=sys means NFS clients connect to NFS with the old UID/GID system, without encryption or integrity checks (instead of Kerberos);
5_cryptocred_pwd_uppercase;11;;PWD;PWD abbrevation for password;
4_general_impersonate;5;-i;impersonate;Impersonate is often used in functionality which can be used to act as another user;
5_general_deny;148;;[Dd]eny;Denying is often used for filtering, etc.;
5_cryptocred_pwd_lowercase;456;;pwd;pwd abbrevation for password;
5_cryptocred_pwd_capitalcase;148;;Pwd;Pwd abbrevation for password;
4_general_exec_narrow;800;;exec\s{0,20}\(;Exec mostly means executing on OS.;
2_cryptocred_useradd;5;;useradd ;Adding a new user in bash scripts. Often found in bad-practice bash scripts or log files.;
2_cryptocred_credentials_narrow;13;-i;creden.{0,20}=.?["'\d];Credentials. Included everything 'creden' because some programers write credencials instead of credentials and such things.;
5_cryptocred_credentials_wide;104;-i;creden;Credentials. Included everything 'creden' because some programers write credencials instead of credentials and such things.;
5_cryptocred_passphrase_wide;59;-i;pass.?phrase;Passphrase and variants of it;
2_cryptocred_secret_narrow;23;-i;se?3?cre?3?t.{0,20}=.?["'\d];Secret and variants of it;
5_cryptocred_secret_wide;311;-i;se?3?cre?3?t;Secret and variants of it;
5_cryptocred_pin_code_wide;213;-i;pin.?code;PIN code and variants of it;
5_general_exec_wide;1806;;exec;Exec mostly means executing on OS.;
5_cryptocred_proxy-authorization;23;-i;Proxy.?Authoris?z?ation;Proxy-Authorization;
4_general_eval_narrow;34;;eval\s{0,20}\(;Eval mostly means evaluating commands.;
5_cryptocred_authorization;136;-i;Authori[sz]ation;Authorization;
5_cryptocred_authentication;374;-i;Authentication;Authentication;
5_general_eval_wide;583;;eval;Eval mostly means evaluating commands.;
4_cryptocred_ssl_usage_use-ssl;22;-i;use.{0,20}SSL;SSL usage with useSSL;
4_general_syscall_narrow;110;-i;sys.?call\s{0,20}\(;Syscall: Command execution?;
4_cryptocred_tls_usage_use-tls;17;-i;use.{0,20}TLS;TLS usage with use TLS;
5_general_syscall_wide;215;-i;sys.?call;Syscall: Command execution?;
4_general_system_narrow;40;-i;system\s{0,20}\(;system: Command execution?;
5_html_upload_form_tag;54;-i;multipart/form-data;HTML upload.;
5_html_upload_input_tag;60;-i;type=.?file;HTML upload form.;
5_html_application_octet-stream;101;-i;application/octet-stream;application/octet-stream is subject to content sniffing in some browsers.;
5_html_text_plain;143;-i;text/plain;text/plain is subject to content sniffing in some browsers.;
5_general_system_wide;2821;-i;system;system: Command execution?;
4_general_usr_dir;672;;["']/usr/;Search for binary paths or similar: Command execution?;
4_general_opt_dir;211;;["']/opt/;Search for binary paths or similar: Command execution?;
5_general_bin_dir;59;;["']/bin/;Search for binary paths or similar: Command execution?;
4_general_sbin_dir;43;;["']/sbin/;Search for binary paths or similar: Command execution?;
4_general_dev_dir;199;;["']/dev/;Search for binary paths or similar: Command execution?;
3_general_tmp_dir;302;;["']/tmp/;Search for binary paths or similar: Command execution?;
3_general_etc_dir;412;;["']/etc/;Configuration files in /etc/;
3_general_mnt_dir;11;;["']/mnt/;Configuration files in /mnt/;
3_general_proc_dir;184;;["']/proc/;Reading values from /proc/;
4_general_popen_narrow;125;-i;popen\s{0,20}\(;popen: Command execution?;
5_general_popen_wide;213;-i;popen;popen: Command execution?;
5_general_spawn_wide;58;-i;spawn;spawn: Command execution?;
5_general_chgrp;17;-i;chgrp;chgrp: Change group command;
5_general_chown;159;-i;chown;chown: Change owner command;
5_general_chmod;314;-i;chmod;chmod: Change mode (permissions) command;
4_general_session_timeout;13;-i;session-?\s?time-?\s?out;Session timeouts should be reasonable short for things like sessions for web logins but can also lead to denial of service conditions in other cases.;
6_ios_string_format_format_wide;41;;format:;iOS string format function format. Just check if the first argument to these functions are user controlled, that could be a format string vulnerability.;
5_ios_string_format_format_narrow;29;;format:[^@];iOS string format function format. Just check if the first argument to these functions are user controlled, that could be a format string vulnerability.;
6_ios_string_format;26;;:format;iOS string format function of NSException. Just check if the first argument to these functions are user controlled, that could be a format string vulnerability.;
5_general_session_timeout;1830;-i;time-?\s?out;Timeout. Whatever timeout this might be, that might be interesting.;
4_general_setcookie;11;-i;setcookie;General setcookie command used in HTTP, important to see HTTPonly/secure flags, path setting, etc.;
4_general_serialise;99;-i;seriali[sz]e;General serialisation code, can lead to command execution;
5_ios_sqlite3_prepare;4;;sqlite3_prepare;Check for SQL injection. See also https://github.com/felixgr/secure-ios-app-dev;
4_ios_syslog;12;;syslog\(;Format string vulnerable syslog method, see also https://github.com/felixgr/secure-ios-app-dev;
5_general_relative_paths;2492;-i;\./;Relative paths. May allow an attacker to put something early in the search path (if parts are user supplied input) and overwrite behavior;
6_java_math_random;33;;Math.random\(;The Math.random class shouldn't be used for crypthography in Java, the SecureRandom should be used instead.;
5_java_crypto_messagedigest;17;-i;messagedigest;Message digest is used to generate hashes;
6_general_update;2250;-i;update;Update code and general update strategy weaknesses;
6_general_backup;397;-i;backup;Backup code and general backup strategy weaknesses;
5_general_kernel;2191;-i;Kernel;Kernel. A reference to something low level in a Kernel?;
4_java_serialization-serialized-data;0;;\\xAC\\xED\\x00\\x05;Java serialized data? Usually Java serialized data in base64 format starts with rO0 or non-base64 with hex ACED0005. Decidezation is something that can result in remote command execution, there are various exploits for such things, see http://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/ and https://github.com/mbechler/marshalsec for example;
6_general_email;2761;-i;\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}\b;Email addresses;
5_general_todo_capital_and_lower;9;;[Tt]odo;TODOs, unfinished and insecure things?;
5_general_todo_uppercase;17;;TODO;TODOs, unfinished and insecure things?;
6_general_workaround;42;-i;workaround;Workarounds, maybe they work around security?;
5_general_hack;17;-i;hack;Hack. Developers sometimes hack something around security.;
6_java_setAttribute;138;;\.setAttribute\(;setAttribute is usually used to set an attribute of a session object, untrusted data should not be added to a session object;
5_general_trick;25;-i;trick;Trick. Sounds suspicious.;
5_general_bypass;18;-i;bypass;Bypass. Sounds suspicious, what do they bypass exactly?;
5_general_fake;54;-i;fake;Fake. Sounds suspicious.;
1_general_uris_auth_info_narrow;46;-i;://[^ :/]{1,20}:[^ :/]{1,20}@;URIs with authentication information specified as ://username:password@example.org;
5_js_dom_xss_location-hash;5;;location\.hash;Location hash: DOM-based XSS source/sink.;
5_js_dom_xss_location-href;225;;location\.href;Location href: DOM-based XSS source/sink.;
5_js_dom_xss_appendChild;130;;\.appendChild\(;appendChild: DOM-based XSS sink.;
5_js_dom_xss_window-location;178;;window\.location;Window location: DOM-based XSS source/sink.;
5_js_console;10;;console\.;Console should not be logged to in production;
2_js_insecure_JSON_parser;2;;Eaeflnr-u;RFC 4627 includes a parser regex example http://www.ietf.org/rfc/rfc4627.txt and it is insecure as explained in the 'the tangled web' book, as it allows incrementing and decrementing of certain variables.;
2_general_uris_auth_info_wide;3452;-i;[^ \:/]{1,20}:[^ \:/]{1,20}@;URIs with authentication information specified as username:password@example.org;
5_general_https_urls;38;-i;https://;All HTTPS URIs;
4_js_node_get_generic;382;;\.get\(;The get function is usually the HTTP GET definition for a certain path;
5_java_jsp_forward_1;11;;\.forward\(;JSP redirect;
5_java_jsp_forward_2;23;;:forward;JSP redirect;
5_general_http_urls;2291;-i;http://;All HTTP URIs;
4_general_non_ssl_uris_ftp;41;-i;ftp://;Non-SSL URIs ftp;
4_general_non_ssl_uris_file;5;-i;file://;file URIs;
5_modsecurity_exec;50;-i;exec:;Possible command injection when executing bash scripts.;
5_modsecurity_append;9;-i;append:;Modsecurity actively changing HTTP response content.;
5_general_hidden;585;-i;hidden;Hidden things, for example hidden HTML fields;
7_general_scheme;100;-i;scheme;Scheme. Is the first part of a URI aka 'the protocol'.;
7_general_schema;89;-i;schema;Schema. Eg. a database schema.;
4_general_directory_listing;5;-i;directory.listing;Directory listing, usually a bad idea in web servers.;
4_php_proc;233;-i;proc_;Dangerous PHP function: proc_;
4_general_hacking_techniques_csrf_regularcase;4;;[cC]srf;XSRF/CSRF and variants of it. Sometimes refered in comments or variable names for code that should prevent it. If you find something interesting that is used for prevention in a framework, you might want to add another grep for that in this script.;
2_general_hacking_techniques_buffer-overflow;35;-i;buffer.{0,20}overflow;Buffer overflow and variants of it. Sometimes refered in comments or variable names for code that should prevent it. If you find something interesting that is used for prevention in a framework, you might want to add another grep for that in this script.;
2_general_hacking_techniques_integer-overflow;17;-i;integer.{0,20}overflow;Integer overflow and variants of it. Sometimes refered in comments or variable names for code that should prevent it. If you find something interesting that is used for prevention in a framework, you might want to add another grep for that in this script.;
2_general_obfuscation;10;-i;obfuscat;Obfuscation and variants of it. Might be interesting code where the obfuscation is done. If you find something interesting that is used for obfuscation in a framework, you might want to add another grep for that in this script.;
4_general_sql_select;72;-i;SELECT\s.{0,200}FROM;SQL SELECT statement;
4_general_sql_insert;60;-i;INSERT.{0,20}INTO;SQL INSERT statement;
4_general_sql_delete;48;-i;DELETE.{0,200}WHERE;SQL DELETE statement;
5_general_sql_sqlite;83;-i;sqlite;SQL SQLITE;
5_general_sql_cursor;1110;-i;cursor;SQL cursor?;
6_php_echo_high_volume;3421;-i;echo;Methods that often introduce XSS: echo;
5_general_base64_content;3675;;(?:[A-Za-z0-9+/]{4}){2,}(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=);Base64 encoded data (that is more than 6 bytes long). This regex won't detect a base64 encoded value over several lines and won't detect one that does not end with an equal sign...;
6_php_print_high_volume;3689;-i;print;Methods that often introduce XSS: print;
5_general_base64_urlsafe;6747;;(?:[A-Za-z0-9_-]{4}){2,}(?:[A-Za-z0-9_-]{2}==|[A-Za-z0-9_-]{3}=);Base64 URL-safe encoded data (that is more than 6 bytes long). To get from URL-safe base64 to regular base64 you need .replace('-','+').replace('_','/'). This regex won't detect a base64 encoded value over several lines and won't detect one that does not end with an equal sign...;
5_general_base64_word;70;-i;base64;Base64 as a word used;
6_general_gpl1;11;-i;GNU\sGPL;GPL violation? Not security related, but your customer might be happy to know such stuff;
6_general_gpl2;16;-i;GPLv2;GPL violation? Not security related, but your customer might be happy to know such stuff;
6_general_gpl4;41;-i;GPL\sVersion;GPL violation? Not security related, but your customer might be happy to know such stuff;
6_general_gpl5;183;-i;General\sPublic\sLicense;GPL violation? Not security related, but your customer might be happy to know such stuff;
4_general_swear_shit;11;-i;shit;Shit and bullshit: Swear words are often used when things don't work as intended by the developer.;
4_general_swear_crap;7;-i;crap;Crap: Swear words are often used when things don't work as intended by the developer.;
8_general_ip-addresses;1324;-i;(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?);IP addresses;
6_general_referer;35;-i;referer;Referer is only used for the HTTP Referer usually, it can be specified by the attacker;
4_general_sqli_generic;45;-i;from\s.{0,200}\swhere\s.{0,200};Generic search for SQL injection, FROM and WHERE being SQL keywords and + meaning string concatenation;
5_general_ldap_generic;5;-i;\(&\(.{0,20}=;A form of query often used for LDAP, should be checked if it doesn't lead to LDAP injection and/or DoS;
7_general_sleep_generic;1101;-i;sleep;Generic sleep call, if server side this could block thread/process and therefore enable to easily do Denial of Service attacks;
4_python_input_function;42;;input\s{0,20}\(;Input function in Python 2.X is dangerous (but not in python 3.X), as it read from stdin and then evals the input, see https://access.redhat.com/blogs/766093/posts/2592591;
7_php_type_unsafe_comparison;7856;;[^=]==[^=];The big problem with == is that in PHP (and some other languages), this comparison is not type safe. What you should always use is ===. For example a hash value that starts with 0E could be interpreted as an integer if you don't take care. There were real world bugs exploiting this issue already, think login form and comparing the hashed user password, what happens if you type in 0 as the password and brute force different usernames until a user has a hash which starts with 0E? Then there is also the question of different systems handling/doing Unicode Normalization (see for example https://gosecure.github.io/unicode-pentester-cheatsheet/ and https://www.gosecure.net/blog/2020/08/04/unicode-for-security-professionals/) or not: B\xC3\xBCcher and B\x75\xcc\x88cher is both UTF-8, but one is the character for a real Unicode u-Umlaut while the other is u[COMBINING DIAERESIS]. If the backend normalizes it could be that identifiers clash.;
4_python_assert_statement;708;;assert\s{1,20};Assert statements are not compiled into the optimized byte code, therefore can not be used for security purposes, see https://access.redhat.com/blogs/766093/posts/2592591;
3_ruby_load;69;;:load;Possible deserialization issues, see https://github.com/presidentbeef/brakeman/blob/master/lib/brakeman/checks/check_deserialize.rb;
5_python_is_object_identity_operator_left;167;;\d\s{1,20}is\s{1,20};The 'is' object identity operator should not be used for numbers, see https://access.redhat.com/blogs/766093/posts/2592591;
5_python_is_object_identity_operator_right;295;;\s{1,20}is\s{1,20}\d;The 'is' object identity operator should not be used for numbers, see https://access.redhat.com/blogs/766093/posts/2592591;
4_python_float_equality_general;6769;;\s{1,20}==\s{1,20};The float type can not be reliably compared for equality. Make sure none of these comparisons uses floats, see https://access.redhat.com/blogs/766093/posts/2592591;
4_python_shutil_move;402;;move\s{0,20}\(;shutil.move is flawed and silently leaves the old file behind if the source and destination are on different file systems, see https://access.redhat.com/blogs/766093/posts/2592591;

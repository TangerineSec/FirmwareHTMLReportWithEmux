Grepit test;Number of results;Used args for grep;Regex used;Grepit comment;
4_apikeys_TOKEN;137;;TOKEN;TOKEN environment variable;
5_cryptocred_ciphers_rc2;72;-i;RC2;RC2 cipher. Security depends heavily on usage and what is secured.;
5_cryptocred_ciphers_rc4;59;;RC4;RC4 cipher. Security depends heavily on usage and what is secured.;
4_cryptocred_ciphers_crc32;5;-i;CRC32;CRC32 is a checksum algorithm. Security depends heavily on usage and what is secured.;
5_c_insecure_c_functions_gets;5;;gets\(;Buffer overflows and format string vulnerable methods: gets --> fgets;
5_c_random;21;;random\(;Random is not a secure random number generator;
7_cryptocred_ciphers_des;488;;DES;DES cipher. Security depends heavily on usage and what is secured.;
3_dotnet_unsafe_declaration;5;;unsafe\s;If you declare a variable 'unsafe' in .NET you can do pointer arythmetic and therefore introduce buffer overflows etc. again;
5_cryptocred_ciphers_md2;34;;MD2;MD2. Security depends heavily on usage and what is secured.;
4_dotnet_marshal;4;;Marshal;If you use Marshal in .NET you use an unsafe API and therefore you could introduce buffer overflows etc. again.;
5_cryptocred_ciphers_md5;173;;MD5;MD5. Security depends heavily on usage and what is secured.;
4_cryptocred_ciphers_sha1_uppercase;42;;SHA-?1;SHA1. Security depends heavily on usage and what is secured.;
4_dotnet_unchecked;11;;unchecked;unchecked allows to disable exceptions for integer overflows, see https://sonarqube.com/coding_rules#types=VULNERABILITY|languages=cs;
4_cryptocred_ciphers_sha1_lowercase;41;;sha-?1;SHA1. Security depends heavily on usage and what is secured.;
4_cryptocred_ciphers_sha256;42;-i;SHA-?256;SHA256. Security depends heavily on usage and what is secured.;
4_cryptocred_ciphers_sha512;27;-i;SHA-?512;SHA256. Security depends heavily on usage and what is secured.;
4_cryptocred_ciphers_PBKDF2;17;-i;PBKDF2;PBKDF2. Security depends heavily on usage and what is secured.;
4_cryptocred_ciphers_hmac;71;-i;HMAC;HMAC. Security depends heavily on usage and what is secured.;
4_cryptocred_ciphers_ntlm;50;;NTLM;NTLM. Security depends heavily on usage and what is secured.;
4_cryptocred_ciphers_kerberos;22;-i;kerberos;Kerberos. Security depends heavily on usage and what is secured.;
6_cryptocred_hash;1457;-i;hash(?!(table|map|set|code));Hash;
2_cryptocred_encryption_key;130;-i;encrypt.{0,20}key;Encryption key and variants of it;
4_cryptocred_dev_random;35;;/dev/u?random;Sources of entropy: /dev/random and /dev/urandom;
5_general_deny;55;;[Dd]eny;Denying is often used for filtering, etc.;
4_general_exec_narrow;88;;exec\s{0,20}\(;Exec mostly means executing on OS.;
2_cryptocred_certificates_and_keys_narrow_begin-certificate;605;;BEGIN CERTIFICATE;Narrow search for certificate and keys specifics of base64 encoded format;
1_cryptocred_certificates_and_keys_narrow_private-key;16;;PRIVATE KEY;Narrow search for certificate and keys specifics of base64 encoded format;
5_general_exec_wide;387;;exec;Exec mostly means executing on OS.;
2_cryptocred_certificates_and_keys_narrow_public-key;5;;PUBLIC KEY;Narrow search for certificate and keys specifics of base64 encoded format;
4_general_eval_narrow;143;;eval\s{0,20}\(;Eval mostly means evaluating commands.;
5_cryptocred_certificates_and_keys_wide_begin-certificate;605;-i;BEGIN.{0,20}CERTIFICATE;Wide search for certificate and keys specifics of base64 encoded format;
5_cryptocred_certificates_and_keys_wide_private-key;129;-i;PRIVATE.{0,20}KEY;Wide search for certificate and keys specifics of base64 encoded format;
5_cryptocred_certificates_and_keys_wide_public-key;151;-i;PUBLIC.{0,20}KEY;Wide search for certificate and keys specifics of base64 encoded format;
6_cryptocred_salt1;23;;[Ss]alt;Salt for a hashing algorithm?;
5_general_eval_wide;1109;;eval;Eval mostly means evaluating commands.;
6_cryptocred_salt2;5;;SALT;Salt for a hashing algorithm?;
5_general_syscall_wide;22;-i;sys.?call;Syscall: Command execution?;
4_general_system_narrow;5;-i;system\s{0,20}\(;system: Command execution?;
4_cryptocred_password;1166;-i;pass.?wo?r?d;Password and variants of it;
5_cryptocred_pw_capitalcase;89;;PW.?=;PW abbrevation for password;
5_general_system_wide;2745;-i;system;system: Command execution?;
4_general_usr_dir;100;;["']/usr/;Search for binary paths or similar: Command execution?;
5_cryptocred_pwd_uppercase;1386;;PWD;PWD abbrevation for password;
4_general_sbin_dir;5;;["']/sbin/;Search for binary paths or similar: Command execution?;
3_general_etc_dir;31;;["']/etc/;Configuration files in /etc/;
5_cryptocred_pwd_lowercase;500;;pwd;pwd abbrevation for password;
3_general_mnt_dir;16;;["']/mnt/;Configuration files in /mnt/;
5_cryptocred_pwd_capitalcase;59;;Pwd;Pwd abbrevation for password;
5_general_pipeline_wide;17;-i;pipeline;pipeline: Command execution?;
5_general_popen_wide;41;-i;popen;popen: Command execution?;
5_general_spawn_wide;17;-i;spawn;spawn: Command execution?;
5_cryptocred_credentials_wide;22;-i;creden;Credentials. Included everything 'creden' because some programers write credencials instead of credentials and such things.;
5_general_chown;11;-i;chown;chown: Change owner command;
5_general_chmod;33;-i;chmod;chmod: Change mode (permissions) command;
2_cryptocred_passphrase_narrow;17;-i;pass.?phrase.{0,20}=.?["'\d];Passphrase and variants of it;
4_general_session_timeout;5;-i;session-?\s?time-?\s?out;Session timeouts should be reasonable short for things like sessions for web logins but can also lead to denial of service conditions in other cases.;
5_cryptocred_passphrase_wide;65;-i;pass.?phrase;Passphrase and variants of it;
5_cryptocred_secret_wide;97;-i;se?3?cre?3?t;Secret and variants of it;
2_cryptocred_pin_code_narrow;11;-i;pin.?code.{0,20}=.?["'\d];PIN code and variants of it;
5_cryptocred_pin_code_wide;53;-i;pin.?code;PIN code and variants of it;
5_cryptocred_proxy-authorization;23;-i;Proxy.?Authoris?z?ation;Proxy-Authorization;
5_cryptocred_authorization;228;-i;Authori[sz]ation;Authorization;
5_general_session_timeout;1518;-i;time-?\s?out;Timeout. Whatever timeout this might be, that might be interesting.;
5_cryptocred_authentication;644;-i;Authentication;Authentication;
4_cryptocred_ssl_usage_require-ssl;11;-i;require.{0,20}SSL;SSL usage with requireSSL;
4_general_setcookie;291;-i;setcookie;General setcookie command used in HTTP, important to see HTTPonly/secure flags, path setting, etc.;
4_cryptocred_ssl_usage_use-ssl;145;-i;use.{0,20}SSL;SSL usage with useSSL;
4_general_serialise;88;-i;seriali[sz]e;General serialisation code, can lead to command execution;
4_cryptocred_tls_usage_require-tls;23;-i;require.{0,20}TLS;TLS usage with require TLS;
4_cryptocred_tls_usage_use-tls;97;-i;use.{0,20}TLS;TLS usage with use TLS;
5_general_relative_paths;478;-i;\./;Relative paths. May allow an attacker to put something early in the search path (if parts are user supplied input) and overwrite behavior;
5_html_upload_form_tag;23;-i;multipart/form-data;HTML upload.;
6_general_update;921;-i;update;Update code and general update strategy weaknesses;
5_html_upload_input_tag;11;-i;type=.?file;HTML upload form.;
6_general_backup;487;-i;backup;Backup code and general backup strategy weaknesses;
5_html_application_octet-stream;22;-i;application/octet-stream;application/octet-stream is subject to content sniffing in some browsers.;
5_general_kernel;289;-i;Kernel;Kernel. A reference to something low level in a Kernel?;
6_general_email;43;-i;\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}\b;Email addresses;
5_general_todo_capital_and_lower;125;;[Tt]odo;TODOs, unfinished and insecure things?;
5_html_text_plain;649;-i;text/plain;text/plain is subject to content sniffing in some browsers.;
5_general_hack;5;-i;hack;Hack. Developers sometimes hack something around security.;
5_general_bypass;22;-i;bypass;Bypass. Sounds suspicious, what do they bypass exactly?;
5_general_fake;89;-i;fake;Fake. Sounds suspicious.;
1_general_uris_auth_info_narrow;5;-i;://[^ :/]{1,20}:[^ :/]{1,20}@;URIs with authentication information specified as ://username:password@example.org;
2_general_uris_auth_info_wide;944;-i;[^ \:/]{1,20}:[^ \:/]{1,20}@;URIs with authentication information specified as username:password@example.org;
5_general_https_urls;61;-i;https://;All HTTPS URIs;
5_general_http_urls;1113;-i;http://;All HTTP URIs;
4_general_non_ssl_uris_ftp;16;-i;ftp://;Non-SSL URIs ftp;
4_general_non_ssl_uris_file;11;-i;file://;file URIs;
5_general_hidden;290;-i;hidden;Hidden things, for example hidden HTML fields;
7_general_schema;99;-i;schema;Schema. Eg. a database schema.;
4_general_xss_uppercase;5;;XSS;XSS. Sometimes refered in comments or variable names for code that should prevent it. If you find something interesting that is used for prevention in a framework, you might want to add another grep for that in this script.;
4_general_xss_regularcase;5;;Xss;XSS. Sometimes refered in comments or variable names for code that should prevent it. If you find something interesting that is used for prevention in a framework, you might want to add another grep for that in this script.;
6_ios_string_format_format_wide;5;;format:;iOS string format function format. Just check if the first argument to these functions are user controlled, that could be a format string vulnerability.;
5_ios_string_format_format_narrow;5;;format:[^@];iOS string format function format. Just check if the first argument to these functions are user controlled, that could be a format string vulnerability.;
2_general_hacking_techniques_buffer-overflow;5;-i;buffer.{0,20}overflow;Buffer overflow and variants of it. Sometimes refered in comments or variable names for code that should prevent it. If you find something interesting that is used for prevention in a framework, you might want to add another grep for that in this script.;
4_general_sql_select;23;-i;SELECT\s.{0,200}FROM;SQL SELECT statement;
2_general_sql_create_login;11;-i;CREATE LOGIN;SQL CREATE LOGIN statement;
5_general_sql_cursor;107;-i;cursor;SQL cursor?;
6_java_math_random;21;;Math.random\(;The Math.random class shouldn't be used for crypthography in Java, the SecureRandom should be used instead.;
5_java_crypto_messagedigest;5;-i;messagedigest;Message digest is used to generate hashes;
5_general_base64_content;4685;;(?:[A-Za-z0-9+/]{4}){2,}(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=);Base64 encoded data (that is more than 6 bytes long). This regex won't detect a base64 encoded value over several lines and won't detect one that does not end with an equal sign...;
4_java_serialization-serialized-data;0;;\\xAC\\xED\\x00\\x05;Java serialized data? Usually Java serialized data in base64 format starts with rO0 or non-base64 with hex ACED0005. Decidezation is something that can result in remote command execution, there are various exploits for such things, see http://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/ and https://github.com/mbechler/marshalsec for example;
6_java_setAttribute;23;;\.setAttribute\(;setAttribute is usually used to set an attribute of a session object, untrusted data should not be added to a session object;
5_general_base64_urlsafe;5225;;(?:[A-Za-z0-9_-]{4}){2,}(?:[A-Za-z0-9_-]{2}==|[A-Za-z0-9_-]{3}=);Base64 URL-safe encoded data (that is more than 6 bytes long). To get from URL-safe base64 to regular base64 you need .replace('-','+').replace('_','/'). This regex won't detect a base64 encoded value over several lines and won't detect one that does not end with an equal sign...;
5_general_base64_word;937;-i;base64;Base64 as a word used;
5_js_dom_xss_location-hash;9;;location\.hash;Location hash: DOM-based XSS source/sink.;
6_general_gpl2;5;-i;GPLv2;GPL violation? Not security related, but your customer might be happy to know such stuff;
5_js_dom_xss_location-href;219;;location\.href;Location href: DOM-based XSS source/sink.;
6_general_gpl4;143;-i;GPL\sVersion;GPL violation? Not security related, but your customer might be happy to know such stuff;
6_general_gpl5;23;-i;General\sPublic\sLicense;GPL violation? Not security related, but your customer might be happy to know such stuff;
5_js_dom_xss_appendChild;68;;\.appendChild\(;appendChild: DOM-based XSS sink.;
4_general_swear_shit;13;-i;shit;Shit and bullshit: Swear words are often used when things don't work as intended by the developer.;
5_js_dom_xss_document_location;394;;document\.location;Document location: DOM-based XSS source/sink.;
8_general_ip-addresses;516;-i;(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?);IP addresses;
5_js_dom_xss_window-location;334;;window\.location;Window location: DOM-based XSS source/sink.;
6_general_referer;25;-i;referer;Referer is only used for the HTTP Referer usually, it can be specified by the attacker;
5_js_dom_xss_document-write;254;;document\.writel?n?\(;Document Write and variants of it: DOM-based XSS source/sink.;
7_general_sleep_generic;495;-i;sleep;Generic sleep call, if server side this could block thread/process and therefore enable to easily do Denial of Service attacks;
5_js_console;11;;console\.;Console should not be logged to in production;
2_js_insecure_JSON_parser;7;;Eaeflnr-u;RFC 4627 includes a parser regex example http://www.ietf.org/rfc/rfc4627.txt and it is insecure as explained in the 'the tangled web' book, as it allows incrementing and decrementing of certain variables.;
4_js_mayscript;47;;mayscript;The mayscript attribute of <applet>, <embed> and <object> should be present, but they can be circumvented by DOMService if present;
5_malware_drug;5;-i;drug;Drug;
4_js_node_get_generic;47;;\.get\(;The get function is usually the HTTP GET definition for a certain path;
5_modsecurity_exec;12;-i;exec:;Possible command injection when executing bash scripts.;
5_modsecurity_append;10;-i;append:;Modsecurity actively changing HTTP response content.;
4_php_proc;5;-i;proc_;Dangerous PHP function: proc_;
5_python_is_object_identity_operator_left;29;;\d\s{1,20}is\s{1,20};The 'is' object identity operator should not be used for numbers, see https://access.redhat.com/blogs/766093/posts/2592591;
5_python_is_object_identity_operator_right;113;;\s{1,20}is\s{1,20}\d;The 'is' object identity operator should not be used for numbers, see https://access.redhat.com/blogs/766093/posts/2592591;
2_php_verifypeer-verifypeer;5;-i;CURLOPT_SSL_VERIFYPEER;CURLOPT_SSL_VERIFYPEER should be set to TRUE, CURLOPT_SSL_VERIFYHOST should be set to 2, if there is a mixup, this can go really wrong. See https://crypto.stanford.edu/~dabo/pubs/abstracts/ssl-client-bugs.html;
2_php_verifypeer-verifyhost;11;-i;CURLOPT_SSL_VERIFYHOST;CURLOPT_SSL_VERIFYPEER should be set to TRUE, CURLOPT_SSL_VERIFYHOST should be set to 2, if there is a mixup, this can go really wrong. See https://crypto.stanford.edu/~dabo/pubs/abstracts/ssl-client-bugs.html;
6_php_echo_high_volume;1698;-i;echo;Methods that often introduce XSS: echo;
4_python_float_equality_general;3593;;\s{1,20}==\s{1,20};The float type can not be reliably compared for equality. Make sure none of these comparisons uses floats, see https://access.redhat.com/blogs/766093/posts/2592591;
4_python_shutil_move;150;;move\s{0,20}\(;shutil.move is flawed and silently leaves the old file behind if the source and destination are on different file systems, see https://access.redhat.com/blogs/766093/posts/2592591;
6_php_print_high_volume;1431;-i;print;Methods that often introduce XSS: print;
7_php_type_unsafe_comparison;4265;;[^=]==[^=];The big problem with == is that in PHP (and some other languages), this comparison is not type safe. What you should always use is ===. For example a hash value that starts with 0E could be interpreted as an integer if you don't take care. There were real world bugs exploiting this issue already, think login form and comparing the hashed user password, what happens if you type in 0 as the password and brute force different usernames until a user has a hash which starts with 0E? Then there is also the question of different systems handling/doing Unicode Normalization (see for example https://gosecure.github.io/unicode-pentester-cheatsheet/ and https://www.gosecure.net/blog/2020/08/04/unicode-for-security-professionals/) or not: B\xC3\xBCcher and B\x75\xcc\x88cher is both UTF-8, but one is the character for a real Unicode u-Umlaut while the other is u[COMBINING DIAERESIS]. If the backend normalizes it could be that identifiers clash.;

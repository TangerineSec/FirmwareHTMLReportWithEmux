CVE-2014-3620:5.0:NA:cURL\ and\ libcurl\ before\ 7.38.0\ allow\ remote\ attackers\ to\ bypass\ the\ Same\ Origin\ Policy\ and\ set\ cookies\ for\ arbitrary\ sites\ by\ setting\ a\ cookie\ for\ a\ top-level\ domain.
CVE-2014-3613:5.0:NA:cURL\ and\ libcurl\ before\ 7.38.0\ does\ not\ properly\ handle\ IP\ addresses\ in\ cookie\ domain\ names\,\ which\ allows\ remote\ attackers\ to\ set\ cookies\ for\ or\ send\ arbitrary\ cookies\ to\ certain\ sites\,\ as\ demonstrated\ by\ a\ site\ at\ 192.168.0.1\ setting\ cookies\ for\ a\ site\ at\ 127.168.0.1.
CVE-2014-3707:4.3:NA:The\ curl_easy_duphandle\ function\ in\ libcurl\ 7.17.1\ through\ 7.38.0\,\ when\ running\ with\ the\ CURLOPT_COPYPOSTFIELDS\ option\,\ does\ not\ properly\ copy\ HTTP\ POST\ data\ for\ an\ easy\ handle\,\ which\ triggers\ an\ out-of-bounds\ read\ that\ allows\ remote\ web\ servers\ to\ read\ sensitive\ memory\ information.
CVE-2014-8151:5.8:NA:The\ darwinssl_connect_step1\ function\ in\ lib/vtls/curl_darwinssl.c\ in\ libcurl\ 7.31.0\ through\ 7.39.0\,\ when\ using\ the\ DarwinSSL\ \(aka\ SecureTransport\)\ back-end\ for\ TLS\,\ does\ not\ check\ if\ a\ cached\ TLS\ session\ validated\ the\ certificate\ when\ reusing\ the\ session\,\ which\ allows\ man-in-the-middle\ attackers\ to\ spoof\ servers\ via\ a\ crafted\ certificate.
CVE-2014-8150:4.3:NA:CRLF\ injection\ vulnerability\ in\ libcurl\ 6.0\ through\ 7.x\ before\ 7.40.0\,\ when\ using\ an\ HTTP\ proxy\,\ allows\ remote\ attackers\ to\ inject\ arbitrary\ HTTP\ headers\ and\ conduct\ HTTP\ response\ splitting\ attacks\ via\ CRLF\ sequences\ in\ a\ URL.
CVE-2015-3143:5.0:NA:cURL\ and\ libcurl\ 7.10.6\ through\ 7.41.0\ does\ not\ properly\ re-use\ NTLM\ connections\,\ which\ allows\ remote\ attackers\ to\ connect\ as\ other\ users\ via\ an\ unauthenticated\ request\,\ a\ similar\ issue\ to\ CVE-2014-0015.
CVE-2015-3145:7.5:NA:The\ sanitize_cookie_path\ function\ in\ cURL\ and\ libcurl\ 7.31.0\ through\ 7.41.0\ does\ not\ properly\ calculate\ an\ index\,\ which\ allows\ remote\ attackers\ to\ cause\ a\ denial\ of\ service\ \(out-of-bounds\ write\ and\ crash\)\ or\ possibly\ have\ other\ unspecified\ impact\ via\ a\ cookie\ path\ containing\ only\ a\ double-quote\ character.
CVE-2015-3144:9.0:NA:The\ fix_hostname\ function\ in\ cURL\ and\ libcurl\ 7.37.0\ through\ 7.41.0\ does\ not\ properly\ calculate\ an\ index\,\ which\ allows\ remote\ attackers\ to\ cause\ a\ denial\ of\ service\ \(out-of-bounds\ read\ or\ write\ and\ crash\)\ or\ possibly\ have\ other\ unspecified\ impact\ via\ a\ zero-length\ host\ name\,\ as\ demonstrated\ by\ \"http://:80\"\ and\ \":80.\"
CVE-2015-3148:5.0:NA:cURL\ and\ libcurl\ 7.10.6\ through\ 7.41.0\ do\ not\ properly\ re-use\ authenticated\ Negotiate\ connections\,\ which\ allows\ remote\ attackers\ to\ connect\ as\ other\ users\ via\ a\ request.
CVE-2015-3153:5.0:NA:The\ default\ configuration\ for\ cURL\ and\ libcurl\ before\ 7.42.1\ sends\ custom\ HTTP\ headers\ to\ both\ the\ proxy\ and\ destination\ server\,\ which\ might\ allow\ remote\ proxy\ servers\ to\ obtain\ sensitive\ information\ by\ reading\ the\ header\ contents.
CVE-2016-5419:5.0:NA:curl\ and\ libcurl\ before\ 7.50.1\ do\ not\ prevent\ TLS\ session\ resumption\ when\ the\ client\ certificate\ has\ changed\,\ which\ allows\ remote\ attackers\ to\ bypass\ intended\ restrictions\ by\ resuming\ a\ session.
CVE-2017-1000100:4.3:NA:When\ doing\ a\ TFTP\ transfer\ and\ curl/libcurl\ is\ given\ a\ URL\ that\ contains\ a\ very\ long\ file\ name\ \(longer\ than\ about\ 515\ bytes\)\,\ the\ file\ name\ is\ truncated\ to\ fit\ within\ the\ buffer\ boundaries\,\ but\ the\ buffer\ size\ is\ still\ wrongly\ updated\ to\ use\ the\ untruncated\ length.\ This\ too\ large\ value\ is\ then\ used\ in\ the\ sendto\(\)\ call\,\ making\ curl\ attempt\ to\ send\ more\ data\ than\ what\ is\ actually\ put\ into\ the\ buffer.\ The\ endto\(\)\ function\ will\ then\ read\ beyond\ the\ end\ of\ the\ heap\ based\ buffer.\ A\ malicious\ HTTP\(S\)\ server\ could\ redirect\ a\ vulnerable\ libcurl-using\ client\ to\ a\ crafted\ TFTP\ URL\ \(if\ the\ client\ hasn\'t\ restricted\ which\ protocols\ it\ allows\ redirects\ to\)\ and\ trick\ it\ to\ send\ private\ memory\ contents\ to\ a\ remote\ server\ over\ UDP.\ Limit\ curl\'s\ redirect\ protocols\ with\ --proto-redir\ and\ libcurl\'s\ with\ CURLOPT_REDIR_PROTOCOLS.
CVE-2016-5420:5.0:NA:curl\ and\ libcurl\ before\ 7.50.1\ do\ not\ check\ the\ client\ certificate\ when\ choosing\ the\ TLS\ connection\ to\ reuse\,\ which\ might\ allow\ remote\ attackers\ to\ hijack\ the\ authentication\ of\ the\ connection\ by\ leveraging\ a\ previously\ created\ connection\ with\ a\ different\ client\ certificate.
CVE-2016-5421:6.8:8.1:Use-after-free\ vulnerability\ in\ libcurl\ before\ 7.50.1\ allows\ attackers\ to\ control\ which\ connection\ is\ used\ or\ possibly\ have\ unspecified\ other\ impact\ via\ unknown\ vectors.
CVE-2017-1000254:5.0:NA:libcurl\ may\ read\ outside\ of\ a\ heap\ allocated\ buffer\ when\ doing\ FTP.\ When\ libcurl\ connects\ to\ an\ FTP\ server\ and\ successfully\ logs\ in\ \(anonymous\ or\ not\)\,\ it\ asks\ the\ server\ for\ the\ current\ directory\ with\ the\ \`PWD\`\ command.\ The\ server\ then\ responds\ with\ a\ 257\ response\ containing\ the\ path\,\ inside\ double\ quotes.\ The\ returned\ path\ name\ is\ then\ kept\ by\ libcurl\ for\ subsequent\ uses.\ Due\ to\ a\ flaw\ in\ the\ string\ parser\ for\ this\ directory\ name\,\ a\ directory\ name\ passed\ like\ this\ but\ without\ a\ closing\ double\ quote\ would\ lead\ to\ libcurl\ not\ adding\ a\ trailing\ NUL\ byte\ to\ the\ buffer\ holding\ the\ name.\ When\ libcurl\ would\ then\ later\ access\ the\ string\,\ it\ could\ read\ beyond\ the\ allocated\ heap\ buffer\ and\ crash\ or\ wrongly\ access\ data\ beyond\ the\ buffer\,\ thinking\ it\ was\ part\ of\ the\ path.\ A\ malicious\ server\ could\ abuse\ this\ fact\ and\ effectively\ prevent\ libcurl-based\ clients\ to\ work\ with\ it\ -\ the\ PWD\ command\ is\ always\ issued\ on\ new\ FTP\ connections\ and\ the\ mistake\ has\ a\ high\ chance\ of\ causing\ a\ segfault.\ The\ simple\ fact\ that\ this\ has\ issue\ remained\ undiscovered\ for\ this\ long\ could\ suggest\ that\ malformed\ PWD\ responses\ are\ rare\ in\ benign\ servers.\ We\ are\ not\ aware\ of\ any\ exploit\ of\ this\ flaw.\ This\ bug\ was\ introduced\ in\ commit\ \[415d2e7cb7\]\(https://github.com/curl/curl/commit/415d2e7cb7\)\,\ March\ 2005.\ In\ libcurl\ version\ 7.56.0\,\ the\ parser\ always\ zero\ terminates\ the\ string\ but\ also\ rejects\ it\ if\ not\ terminated\ properly\ with\ a\ final\ double\ quote.
CVE-2016-7141:5.0:NA:curl\ and\ libcurl\ before\ 7.50.2\,\ when\ built\ with\ NSS\ and\ the\ libnsspem.so\ library\ is\ available\ at\ runtime\,\ allow\ remote\ attackers\ to\ hijack\ the\ authentication\ of\ a\ TLS\ connection\ by\ leveraging\ reuse\ of\ a\ previously\ loaded\ client\ certificate\ from\ file\ for\ a\ connection\ for\ which\ no\ certificate\ has\ been\ set\,\ a\ different\ vulnerability\ than\ CVE-2016-5420.
CVE-2016-7167:7.5:NA:Multiple\ integer\ overflows\ in\ the\ \(1\)\ curl_escape\,\ \(2\)\ curl_easy_escape\,\ \(3\)\ curl_unescape\,\ and\ \(4\)\ curl_easy_unescape\ functions\ in\ libcurl\ before\ 7.50.3\ allow\ attackers\ to\ have\ unspecified\ impact\ via\ a\ string\ of\ length\ 0xffffffff\,\ which\ triggers\ a\ heap-based\ buffer\ overflow.
CVE-2016-8622:7.5:NA:The\ URL\ percent-encoding\ decode\ function\ in\ libcurl\ before\ 7.51.0\ is\ called\ \`curl_easy_unescape\`.\ Internally\,\ even\ if\ this\ function\ would\ be\ made\ to\ allocate\ a\ unscape\ destination\ buffer\ larger\ than\ 2GB\,\ it\ would\ return\ that\ new\ length\ in\ a\ signed\ 32\ bit\ integer\ variable\,\ thus\ the\ length\ would\ get\ either\ just\ truncated\ or\ both\ truncated\ and\ turned\ negative.\ That\ could\ then\ lead\ to\ libcurl\ writing\ outside\ of\ its\ heap\ based\ buffer.
CVE-2017-1000257:6.4:NA:An\ IMAP\ FETCH\ response\ line\ indicates\ the\ size\ of\ the\ returned\ data\,\ in\ number\ of\ bytes.\ When\ that\ response\ says\ the\ data\ is\ zero\ bytes\,\ libcurl\ would\ pass\ on\ that\ \(non-existing\)\ data\ with\ a\ pointer\ and\ the\ size\ \(zero\)\ to\ the\ deliver-data\ function.\ libcurl\'s\ deliver-data\ function\ treats\ zero\ as\ a\ magic\ number\ and\ invokes\ strlen\(\)\ on\ the\ data\ to\ figure\ out\ the\ length.\ The\ strlen\(\)\ is\ called\ on\ a\ heap\ based\ buffer\ that\ might\ not\ be\ zero\ terminated\ so\ libcurl\ might\ read\ beyond\ the\ end\ of\ it\ into\ whatever\ memory\ lies\ after\ \(or\ just\ crash\)\ and\ then\ deliver\ that\ to\ the\ application\ as\ if\ it\ was\ actually\ downloaded.
CVE-2017-8816:7.5:NA:The\ NTLM\ authentication\ feature\ in\ curl\ and\ libcurl\ before\ 7.57.0\ on\ 32-bit\ platforms\ allows\ attackers\ to\ cause\ a\ denial\ of\ service\ \(integer\ overflow\ and\ resultant\ buffer\ overflow\,\ and\ application\ crash\)\ or\ possibly\ have\ unspecified\ other\ impact\ via\ vectors\ involving\ long\ user\ and\ password\ fields.
CVE-2017-8817:7.5:NA:The\ FTP\ wildcard\ function\ in\ curl\ and\ libcurl\ before\ 7.57.0\ allows\ remote\ attackers\ to\ cause\ a\ denial\ of\ service\ \(out-of-bounds\ read\ and\ application\ crash\)\ or\ possibly\ have\ unspecified\ other\ impact\ via\ a\ string\ that\ ends\ with\ an\ \'\[\'\ character.
CVE-2018-16890:5.0:7.5:libcurl\ versions\ from\ 7.36.0\ to\ before\ 7.64.0\ is\ vulnerable\ to\ a\ heap\ buffer\ out-of-bounds\ read.\ The\ function\ handling\ incoming\ NTLM\ type-2\ messages\ \(\`lib/vauth/ntlm.c:ntlm_decode_type2_target\`\)\ does\ not\ validate\ incoming\ data\ correctly\ and\ is\ subject\ to\ an\ integer\ overflow\ vulnerability.\ Using\ that\ overflow\,\ a\ malicious\ or\ broken\ NTLM\ server\ could\ trick\ libcurl\ to\ accept\ a\ bad\ length\ +\ offset\ combination\ that\ would\ lead\ to\ a\ buffer\ read\ out-of-bounds.
CVE-2018-14618:10.0:NA:curl\ before\ version\ 7.61.1\ is\ vulnerable\ to\ a\ buffer\ overrun\ in\ the\ NTLM\ authentication\ code.\ The\ internal\ function\ Curl_ntlm_core_mk_nt_hash\ multiplies\ the\ length\ of\ the\ password\ by\ two\ \(SUM\)\ to\ figure\ out\ how\ large\ temporary\ storage\ area\ to\ allocate\ from\ the\ heap.\ The\ length\ value\ is\ then\ subsequently\ used\ to\ iterate\ over\ the\ password\ and\ generate\ output\ into\ the\ allocated\ storage\ buffer.\ On\ systems\ with\ a\ 32\ bit\ size_t\,\ the\ math\ to\ calculate\ SUM\ triggers\ an\ integer\ overflow\ when\ the\ password\ length\ exceeds\ 2GB\ \(2\^31\ bytes\).\ This\ integer\ overflow\ usually\ causes\ a\ very\ small\ buffer\ to\ actually\ get\ allocated\ instead\ of\ the\ intended\ very\ huge\ one\,\ making\ the\ use\ of\ that\ buffer\ end\ up\ in\ a\ heap\ buffer\ overflow.\ \(This\ bug\ is\ almost\ identical\ to\ CVE-2017-8816.\)
CVE-2019-3822:7.5:9.8:libcurl\ versions\ from\ 7.36.0\ to\ before\ 7.64.0\ are\ vulnerable\ to\ a\ stack-based\ buffer\ overflow.\ The\ function\ creating\ an\ outgoing\ NTLM\ type-3\ header\ \(\`lib/vauth/ntlm.c:Curl_auth_create_ntlm_type3_message\(\)\`\)\,\ generates\ the\ request\ HTTP\ header\ contents\ based\ on\ previously\ received\ data.\ The\ check\ that\ exists\ to\ prevent\ the\ local\ buffer\ from\ getting\ overflowed\ is\ implemented\ wrongly\ \(using\ unsigned\ math\)\ and\ as\ such\ it\ does\ not\ prevent\ the\ overflow\ from\ happening.\ This\ output\ data\ can\ grow\ larger\ than\ the\ local\ buffer\ if\ very\ large\ \'nt\ response\'\ data\ is\ extracted\ from\ a\ previous\ NTLMv2\ header\ provided\ by\ the\ malicious\ or\ broken\ HTTP\ server.\ Such\ a\ \'large\ value\'\ needs\ to\ be\ around\ 1000\ bytes\ or\ more.\ The\ actual\ payload\ data\ copied\ to\ the\ target\ buffer\ comes\ from\ the\ NTLMv2\ type-2\ response\ header.
CVE-2019-3823:5.0:NA:libcurl\ versions\ from\ 7.34.0\ to\ before\ 7.64.0\ are\ vulnerable\ to\ a\ heap\ out-of-bounds\ read\ in\ the\ code\ handling\ the\ end-of-response\ for\ SMTP.\ If\ the\ buffer\ passed\ to\ \`smtp_endofresp\(\)\`\ isn\'t\ NUL\ terminated\ and\ contains\ no\ character\ ending\ the\ parsed\ number\,\ and\ \`len\`\ is\ set\ to\ 5\,\ then\ the\ \`strtol\(\)\`\ call\ reads\ beyond\ the\ allocated\ buffer.\ The\ read\ contents\ will\ not\ be\ returned\ to\ the\ caller.
CVE-2019-5436:4.6:7.8:A\ heap\ buffer\ overflow\ in\ the\ TFTP\ receiving\ code\ allows\ for\ DoS\ or\ arbitrary\ code\ execution\ in\ libcurl\ versions\ 7.19.4\ through\ 7.64.1.
CVE-2020-8285:5.0:7.5:curl\ 7.21.0\ to\ and\ including\ 7.73.0\ is\ vulnerable\ to\ uncontrolled\ recursion\ due\ to\ a\ stack\ overflow\ issue\ in\ FTP\ wildcard\ match\ parsing.
CVE-2020-8231:5.0:7.5:Due\ to\ use\ of\ a\ dangling\ pointer\,\ libcurl\ 7.29.0\ through\ 7.71.1\ can\ use\ the\ wrong\ connection\ when\ sending\ data.
CVE-2021-22876:5.0:5.3:curl\ 7.1.1\ to\ and\ including\ 7.75.0\ is\ vulnerable\ to\ an\ \"Exposure\ of\ Private\ Personal\ Information\ to\ an\ Unauthorized\ Actor\"\ by\ leaking\ credentials\ in\ the\ HTTP\ Referer:\ header.\ libcurl\ does\ not\ strip\ off\ user\ credentials\ from\ the\ URL\ when\ automatically\ populating\ the\ Referer:\ HTTP\ request\ header\ field\ in\ outgoing\ HTTP\ requests\,\ and\ therefore\ risks\ leaking\ sensitive\ data\ to\ the\ server\ that\ is\ the\ target\ of\ the\ second\ HTTP\ request.
CVE-2021-22924:4.3:3.7:libcurl\ keeps\ previously\ used\ connections\ in\ a\ connection\ pool\ for\ subsequenttransfers\ to\ reuse\,\ if\ one\ of\ them\ matches\ the\ setup.Due\ to\ errors\ in\ the\ logic\,\ the\ config\ matching\ function\ did\ not\ take\ \'issuercert\'\ into\ account\ and\ it\ compared\ the\ involved\ paths\ \*case\ insensitively\*\,which\ could\ lead\ to\ libcurl\ reusing\ wrong\ connections.File\ paths\ are\,\ or\ can\ be\,\ case\ sensitive\ on\ many\ systems\ but\ not\ all\,\ and\ caneven\ vary\ depending\ on\ used\ file\ systems.The\ comparison\ also\ didn\'t\ include\ the\ \'issuer\ cert\'\ which\ a\ transfer\ can\ setto\ qualify\ how\ to\ verify\ the\ server\ certificate.
CVE-2023-27535:NA:5.9:An\ authentication\ bypass\ vulnerability\ exists\ in\ libcurl\ \<8.0.0\ in\ the\ FTP\ connection\ reuse\ feature\ that\ can\ result\ in\ wrong\ credentials\ being\ used\ during\ subsequent\ transfers.\ Previously\ created\ connections\ are\ kept\ in\ a\ connection\ pool\ for\ reuse\ if\ they\ match\ the\ current\ setup.\ However\,\ certain\ FTP\ settings\ such\ as\ CURLOPT_FTP_ACCOUNT\,\ CURLOPT_FTP_ALTERNATIVE_TO_USER\,\ CURLOPT_FTP_SSL_CCC\,\ and\ CURLOPT_USE_SSL\ were\ not\ included\ in\ the\ configuration\ match\ checks\,\ causing\ them\ to\ match\ too\ easily.\ This\ could\ lead\ to\ libcurl\ using\ the\ wrong\ credentials\ when\ performing\ a\ transfer\,\ potentially\ allowing\ unauthorized\ access\ to\ sensitive\ information.
CVE-2023-27536:NA:5.9:An\ authentication\ bypass\ vulnerability\ exists\ libcurl\ \<8.0.0\ in\ the\ connection\ reuse\ feature\ which\ can\ reuse\ previously\ established\ connections\ with\ incorrect\ user\ permissions\ due\ to\ a\ failure\ to\ check\ for\ changes\ in\ the\ CURLOPT_GSSAPI_DELEGATION\ option.\ This\ vulnerability\ affects\ krb5/kerberos/negotiate/GSSAPI\ transfers\ and\ could\ potentially\ result\ in\ unauthorized\ access\ to\ sensitive\ information.\ The\ safest\ option\ is\ to\ not\ reuse\ connections\ if\ the\ CURLOPT_GSSAPI_DELEGATION\ option\ has\ been\ changed.
CVE-2023-27538:NA:5.5:An\ authentication\ bypass\ vulnerability\ exists\ in\ libcurl\ prior\ to\ v8.0.0\ where\ it\ reuses\ a\ previously\ established\ SSH\ connection\ despite\ the\ fact\ that\ an\ SSH\ option\ was\ modified\,\ which\ should\ have\ prevented\ reuse.\ libcurl\ maintains\ a\ pool\ of\ previously\ used\ connections\ to\ reuse\ them\ for\ subsequent\ transfers\ if\ the\ configurations\ match.\ However\,\ two\ SSH\ settings\ were\ omitted\ from\ the\ configuration\ check\,\ allowing\ them\ to\ match\ easily\,\ potentially\ leading\ to\ the\ reuse\ of\ an\ inappropriate\ connection.
CVE-2023-38546:NA:3.7:$'This flaw allows an attacker to insert cookies at will into a running program\nusing libcurl, if the specific series of conditions are met.\n\nlibcurl performs transfers. In its API, an application creates "easy handles"\nthat are the individual handles for single transfers.\n\nlibcurl provides a function call that duplicates en easy handle called\n[curl_easy_duphandle](https://curl.se/libcurl/c/curl_easy_duphandle.html).\n\nIf a transfer has cookies enabled when the handle is duplicated, the\ncookie-enable state is also cloned - but without cloning the actual\ncookies. If the source handle did not read any cookies from a specific file on\ndisk, the cloned version of the handle would instead store the file name as\n`none` (using the four ASCII letters, no quotes).\n\nSubsequent use of the cloned handle that does not explicitly set a source to\nload cookies from would then inadvertently load cookies from a file named\n`none` - if such a file exists and is readable in the current directory of the\nprogram using libcurl. And if using the correct file format of course.'

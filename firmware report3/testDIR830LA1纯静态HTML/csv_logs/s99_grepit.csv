Grepit test;Number of results;Used args for grep;Regex used;Grepit comment;
6_android_access_query;297;;query\(;Do a query on Android;
5_android_intents_getData;41;;\.getData\(;Android get data from an intent;
4_android_system_path;17;;/system;/system is the path where a lot of binaries are stored. So whenever an Android app does something like executing a binary such as /system/xbin/which with an absolut path. Often used in root-detection mechanisms.;
4_apikeys_TOKEN;17;;TOKEN;TOKEN environment variable;
5_c_malloc;11;;malloc\(;malloc. Rather rare bug, but see issues CVE-2010-0041 and CVE-2010-0042. Uninitialized memory access issues? Could also happen in java/android native code. Also developers should check return codes.;
5_c_realloc;17;;realloc\(;realloc. Rather rare bug, but see issues CVE-2010-0041 and CVE-2010-0042. Uninitialized memory access issues? Could also happen in java/android native code. Also developers should check return codes.;
4_cryptocred_crypt_call;23;-i;crypt\(;Crypt (the method itself) can be dangerous, also matches any calls to decrypt(, encrypt( or whatevercrypt(, which is desired;
5_cryptocred_ciphers_rc2;46;-i;RC2;RC2 cipher. Security depends heavily on usage and what is secured.;
5_cryptocred_ciphers_rc4;45;;RC4;RC4 cipher. Security depends heavily on usage and what is secured.;
4_cryptocred_ciphers_crc32;5;-i;CRC32;CRC32 is a checksum algorithm. Security depends heavily on usage and what is secured.;
5_c_insecure_c_functions_sprintf_snprintf;5;;snprintf\(;Buffer overflows and format string vulnerable methods: sprintf --> snprintf, vsprintf --> vsnprintf;
7_cryptocred_ciphers_des;329;;DES;DES cipher. Security depends heavily on usage and what is secured.;
5_cryptocred_ciphers_md2;11;;MD2;MD2. Security depends heavily on usage and what is secured.;
5_c_insecure_c_functions_gets;5;;gets\(;Buffer overflows and format string vulnerable methods: gets --> fgets;
5_c_random;97;;random\(;Random is not a secure random number generator;
5_cryptocred_ciphers_md5;169;;MD5;MD5. Security depends heavily on usage and what is secured.;
4_cryptocred_ciphers_sha1_uppercase;42;;SHA-?1;SHA1. Security depends heavily on usage and what is secured.;
3_dotnet_unsafe_declaration;5;;unsafe\s;If you declare a variable 'unsafe' in .NET you can do pointer arythmetic and therefore introduce buffer overflows etc. again;
4_cryptocred_ciphers_sha1_lowercase;53;;sha-?1;SHA1. Security depends heavily on usage and what is secured.;
4_dotnet_marshal;29;;Marshal;If you use Marshal in .NET you use an unsafe API and therefore you could introduce buffer overflows etc. again.;
4_cryptocred_ciphers_sha256;30;-i;SHA-?256;SHA256. Security depends heavily on usage and what is secured.;
4_cryptocred_ciphers_sha512;21;-i;SHA-?512;SHA256. Security depends heavily on usage and what is secured.;
4_cryptocred_ciphers_PBKDF2;17;-i;PBKDF2;PBKDF2. Security depends heavily on usage and what is secured.;
4_dotnet_unchecked;25;;unchecked;unchecked allows to disable exceptions for integer overflows, see https://sonarqube.com/coding_rules#types=VULNERABILITY|languages=cs;
4_cryptocred_ciphers_hmac;320;-i;HMAC;HMAC. Security depends heavily on usage and what is secured.;
4_cryptocred_ciphers_ntlm;77;;NTLM;NTLM. Security depends heavily on usage and what is secured.;
4_cryptocred_ciphers_kerberos;34;-i;kerberos;Kerberos. Security depends heavily on usage and what is secured.;
6_cryptocred_hash;689;-i;hash(?!(table|map|set|code));Hash;
1_cryptocred_passwd_or_shadow_files;23;-i;[^:]{3,20}:[^:]{1,200}:\d{0,20}:\d{0,20}:[^:]{0,200}:[^:]{0,200}:[^:]*$;Find *nix passwd or shadow files.;
2_cryptocred_encryption_key;126;-i;encrypt.{0,20}key;Encryption key and variants of it;
4_cryptocred_dev_random;69;;/dev/u?random;Sources of entropy: /dev/random and /dev/urandom;
2_cryptocred_certificates_and_keys_narrow_begin-certificate;5;;BEGIN CERTIFICATE;Narrow search for certificate and keys specifics of base64 encoded format;
1_cryptocred_certificates_and_keys_narrow_private-key;16;;PRIVATE KEY;Narrow search for certificate and keys specifics of base64 encoded format;
2_cryptocred_certificates_and_keys_narrow_public-key;5;;PUBLIC KEY;Narrow search for certificate and keys specifics of base64 encoded format;
5_cryptocred_certificates_and_keys_wide_begin-certificate;5;-i;BEGIN.{0,20}CERTIFICATE;Wide search for certificate and keys specifics of base64 encoded format;
5_cryptocred_certificates_and_keys_wide_private-key;249;-i;PRIVATE.{0,20}KEY;Wide search for certificate and keys specifics of base64 encoded format;
5_cryptocred_certificates_and_keys_wide_public-key;158;-i;PUBLIC.{0,20}KEY;Wide search for certificate and keys specifics of base64 encoded format;
6_cryptocred_salt1;41;;[Ss]alt;Salt for a hashing algorithm?;
6_cryptocred_salt2;5;;SALT;Salt for a hashing algorithm?;
5_general_deny;329;;[Dd]eny;Denying is often used for filtering, etc.;
4_general_exec_narrow;141;;exec\s{0,20}\(;Exec mostly means executing on OS.;
5_general_exec_wide;669;;exec;Exec mostly means executing on OS.;
4_general_eval_narrow;111;;eval\s{0,20}\(;Eval mostly means evaluating commands.;
5_general_eval_wide;232;;eval;Eval mostly means evaluating commands.;
5_general_syscall_wide;53;-i;sys.?call;Syscall: Command execution?;
4_general_system_narrow;17;-i;system\s{0,20}\(;system: Command execution?;
5_general_system_wide;2018;-i;system;system: Command execution?;
4_general_usr_dir;17;;["']/usr/;Search for binary paths or similar: Command execution?;
4_general_opt_dir;6;;["']/opt/;Search for binary paths or similar: Command execution?;
4_general_sbin_dir;5;;["']/sbin/;Search for binary paths or similar: Command execution?;
3_general_etc_dir;17;;["']/etc/;Configuration files in /etc/;
3_general_proc_dir;11;;["']/proc/;Reading values from /proc/;
5_general_popen_wide;290;-i;popen;popen: Command execution?;
5_general_spawn_wide;17;-i;spawn;spawn: Command execution?;
5_general_chgrp;5;-i;chgrp;chgrp: Change group command;
5_general_chown;77;-i;chown;chown: Change owner command;
5_general_chmod;105;-i;chmod;chmod: Change mode (permissions) command;
4_general_session_timeout;11;-i;session-?\s?time-?\s?out;Session timeouts should be reasonable short for things like sessions for web logins but can also lead to denial of service conditions in other cases.;
4_cryptocred_password;7226;-i;pass.?wo?r?d;Password and variants of it;
3_cryptocred_verify_password;29;-i;verify.?pass.?wo?r?d;Password verification methods, interesting to see if timing ;
5_cryptocred_pw_capitalcase;19;;PW.?=;PW abbrevation for password;
5_cryptocred_pwd_uppercase;77;;PWD;PWD abbrevation for password;
5_cryptocred_pwd_lowercase;150;;pwd;pwd abbrevation for password;
5_cryptocred_pwd_capitalcase;69;;Pwd;Pwd abbrevation for password;
5_cryptocred_credentials_wide;31;-i;creden;Credentials. Included everything 'creden' because some programers write credencials instead of credentials and such things.;
5_general_session_timeout;2624;-i;time-?\s?out;Timeout. Whatever timeout this might be, that might be interesting.;
2_cryptocred_passphrase_narrow;36;-i;pass.?phrase.{0,20}=.?["'\d];Passphrase and variants of it;
5_cryptocred_passphrase_wide;189;-i;pass.?phrase;Passphrase and variants of it;
4_general_serialise;147;-i;seriali[sz]e;General serialisation code, can lead to command execution;
2_cryptocred_secret_narrow;80;-i;se?3?cre?3?t.{0,20}=.?["'\d];Secret and variants of it;
5_cryptocred_secret_wide;396;-i;se?3?cre?3?t;Secret and variants of it;
2_cryptocred_pin_code_narrow;15;-i;pin.?code.{0,20}=.?["'\d];PIN code and variants of it;
5_cryptocred_pin_code_wide;102;-i;pin.?code;PIN code and variants of it;
5_cryptocred_proxy-authorization;5;-i;Proxy.?Authoris?z?ation;Proxy-Authorization;
5_cryptocred_authorization;202;-i;Authori[sz]ation;Authorization;
5_cryptocred_authentication;1175;-i;Authentication;Authentication;
4_cryptocred_ssl_usage_use-ssl;35;-i;use.{0,20}SSL;SSL usage with useSSL;
5_general_relative_paths;2883;-i;\./;Relative paths. May allow an attacker to put something early in the search path (if parts are user supplied input) and overwrite behavior;
4_general_creditcard;27;-i;credit.?card;Search for the word credit card;
4_cryptocred_tls_usage_use-tls;17;-i;use.{0,20}TLS;TLS usage with use TLS;
5_html_upload_form_tag;58;-i;multipart/form-data;HTML upload.;
5_html_upload_input_tag;76;-i;type=.?file;HTML upload form.;
7_html_autocomplete;85;-i;autocomplete;Autocomplete should be set to off for password fields.;
5_html_application_octet-stream;23;-i;application/octet-stream;application/octet-stream is subject to content sniffing in some browsers.;
5_html_text_plain;94;-i;text/plain;text/plain is subject to content sniffing in some browsers.;
6_general_update;2217;-i;update;Update code and general update strategy weaknesses;
6_general_backup;66;-i;backup;Backup code and general backup strategy weaknesses;
5_ios_file_access_writeToFile;11;;writeToFile;iOS writeToFile;
5_general_kernel;465;-i;Kernel;Kernel. A reference to something low level in a Kernel?;
6_general_email;92;-i;\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}\b;Email addresses;
5_general_todo_capital_and_lower;187;;[Tt]odo;TODOs, unfinished and insecure things?;
5_general_todo_uppercase;135;;TODO;TODOs, unfinished and insecure things?;
6_general_workaround;35;-i;workaround;Workarounds, maybe they work around security?;
5_general_hack;54;-i;hack;Hack. Developers sometimes hack something around security.;
5_general_bypass;5;-i;bypass;Bypass. Sounds suspicious, what do they bypass exactly?;
5_general_fake;117;-i;fake;Fake. Sounds suspicious.;
2_general_uris_auth_info_wide;1360;-i;[^ \:/]{1,20}:[^ \:/]{1,20}@;URIs with authentication information specified as username:password@example.org;
5_general_https_urls;181;-i;https://;All HTTPS URIs;
6_ios_string_format_format_wide;21;;format:;iOS string format function format. Just check if the first argument to these functions are user controlled, that could be a format string vulnerability.;
5_ios_string_format_format_narrow;15;;format:[^@];iOS string format function format. Just check if the first argument to these functions are user controlled, that could be a format string vulnerability.;
6_ios_string_format_appendFormat_wide;5;;appendFormat:;iOS string format function appendFormat. Just check if the first argument to these functions are user controlled, that could be a format string vulnerability.;
6_ios_string_format;27;;:format;iOS string format function of NSException. Just check if the first argument to these functions are user controlled, that could be a format string vulnerability.;
5_general_http_urls;3296;-i;http://;All HTTP URIs;
4_general_non_ssl_uris_ftp;5;-i;ftp://;Non-SSL URIs ftp;
5_general_hidden;1109;-i;hidden;Hidden things, for example hidden HTML fields;
7_general_scheme;5;-i;scheme;Scheme. Is the first part of a URI aka 'the protocol'.;
6_java_math_random;97;;Math.random\(;The Math.random class shouldn't be used for crypthography in Java, the SecureRandom should be used instead.;
5_java_crypto_messagedigest;5;-i;messagedigest;Message digest is used to generate hashes;
4_java_http_setHeader;139;;\.setHeader\(;Method to set HTTP headers in Java;
7_general_schema;1209;-i;schema;Schema. Eg. a database schema.;
4_general_hacking_techniques_csrf_regularcase;4;;[cC]srf;XSRF/CSRF and variants of it. Sometimes refered in comments or variable names for code that should prevent it. If you find something interesting that is used for prevention in a framework, you might want to add another grep for that in this script.;
2_general_hacking_techniques_buffer-overflow;61;-i;buffer.{0,20}overflow;Buffer overflow and variants of it. Sometimes refered in comments or variable names for code that should prevent it. If you find something interesting that is used for prevention in a framework, you might want to add another grep for that in this script.;
4_general_sql_select;119;-i;SELECT\s.{0,200}FROM;SQL SELECT statement;
4_general_sql_insert;11;-i;INSERT.{0,20}INTO;SQL INSERT statement;
4_java_serialization-serialized-data;0;;\\xAC\\xED\\x00\\x05;Java serialized data? Usually Java serialized data in base64 format starts with rO0 or non-base64 with hex ACED0005. Decidezation is something that can result in remote command execution, there are various exploits for such things, see http://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/ and https://github.com/mbechler/marshalsec for example;
5_general_sql_cursor;2348;-i;cursor;SQL cursor?;
6_java_setAttribute;1082;;\.setAttribute\(;setAttribute is usually used to set an attribute of a session object, untrusted data should not be added to a session object;
5_general_base64_content;3327;;(?:[A-Za-z0-9+/]{4}){2,}(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=);Base64 encoded data (that is more than 6 bytes long). This regex won't detect a base64 encoded value over several lines and won't detect one that does not end with an equal sign...;
5_js_dom_xss_location-hash;17;;location\.hash;Location hash: DOM-based XSS source/sink.;
5_js_dom_xss_location-href;495;;location\.href;Location href: DOM-based XSS source/sink.;
5_js_dom_xss_location-pathname;17;;location\.pathname;Location pathname: DOM-based XSS source/sink.;
5_js_dom_xss_location-search;5;;location\.search;Location search: DOM-based XSS source/sink.;
5_js_dom_xss_appendChild;293;;\.appendChild\(;appendChild: DOM-based XSS sink.;
5_js_dom_xss_document_location;5;;document\.location;Document location: DOM-based XSS source/sink.;
5_js_dom_xss_window-location;777;;window\.location;Window location: DOM-based XSS source/sink.;
5_js_dom_xss_document-URL;5;;document\.URL;Document URL: DOM-based XSS source/sink.;
5_js_dom_xss_document-write;217;;document\.writel?n?\(;Document Write and variants of it: DOM-based XSS source/sink.;
5_js_console;229;;console\.;Console should not be logged to in production;
4_js_localStorage;286;;localStorage;Sensitive information in localStorage is not encrypted, see https://sonarqube.com/coding_rules#types=VULNERABILITY|languages=js;
5_general_base64_urlsafe;4325;;(?:[A-Za-z0-9_-]{4}){2,}(?:[A-Za-z0-9_-]{2}==|[A-Za-z0-9_-]{3}=);Base64 URL-safe encoded data (that is more than 6 bytes long). To get from URL-safe base64 to regular base64 you need .replace('-','+').replace('_','/'). This regex won't detect a base64 encoded value over several lines and won't detect one that does not end with an equal sign...;
4_js_sessionStorage;422;;sessionStorage;Sensitive information in sessionStorage is not encrypted, see https://sonarqube.com/coding_rules#types=VULNERABILITY|languages=js;
2_js_insecure_JSON_parser;2;;Eaeflnr-u;RFC 4627 includes a parser regex example http://www.ietf.org/rfc/rfc4627.txt and it is insecure as explained in the 'the tangled web' book, as it allows incrementing and decrementing of certain variables.;
5_general_base64_word;221;-i;base64;Base64 as a word used;
6_general_gpl1;5;-i;GNU\sGPL;GPL violation? Not security related, but your customer might be happy to know such stuff;
6_general_gpl2;5;-i;GPLv2;GPL violation? Not security related, but your customer might be happy to know such stuff;
6_general_gpl4;179;-i;GPL\sVersion;GPL violation? Not security related, but your customer might be happy to know such stuff;
6_general_gpl5;37;-i;General\sPublic\sLicense;GPL violation? Not security related, but your customer might be happy to know such stuff;
4_js_node_get_generic;144;;\.get\(;The get function is usually the HTTP GET definition for a certain path;
4_general_swear_shit;33;-i;shit;Shit and bullshit: Swear words are often used when things don't work as intended by the developer.;
5_malware_drug;5;-i;drug;Drug;
5_modsecurity_append;23;-i;append:;Modsecurity actively changing HTTP response content.;
8_general_ip-addresses;2435;-i;(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?);IP addresses;
6_general_referer;11;-i;referer;Referer is only used for the HTTP Referer usually, it can be specified by the attacker;
4_general_sqli_generic;5;-i;from\s.{0,200}\swhere\s.{0,200};Generic search for SQL injection, FROM and WHERE being SQL keywords and + meaning string concatenation;
4_php_proc;70;-i;proc_;Dangerous PHP function: proc_;
7_general_sleep_generic;472;-i;sleep;Generic sleep call, if server side this could block thread/process and therefore enable to easily do Denial of Service attacks;
4_python_input_function;5;;input\s{0,20}\(;Input function in Python 2.X is dangerous (but not in python 3.X), as it read from stdin and then evals the input, see https://access.redhat.com/blogs/766093/posts/2592591;
5_python_is_object_identity_operator_left;128;;\d\s{1,20}is\s{1,20};The 'is' object identity operator should not be used for numbers, see https://access.redhat.com/blogs/766093/posts/2592591;
5_python_is_object_identity_operator_right;348;;\s{1,20}is\s{1,20}\d;The 'is' object identity operator should not be used for numbers, see https://access.redhat.com/blogs/766093/posts/2592591;
6_php_echo_high_volume;1611;-i;echo;Methods that often introduce XSS: echo;
6_php_print_high_volume;1524;-i;print;Methods that often introduce XSS: print;
4_python_float_equality_general;11657;;\s{1,20}==\s{1,20};The float type can not be reliably compared for equality. Make sure none of these comparisons uses floats, see https://access.redhat.com/blogs/766093/posts/2592591;
4_python_double_underscore_general;11;;self\.__;Double underscore variable visibility can be tricky, see https://access.redhat.com/blogs/766093/posts/2592591;
4_python_shutil_move;471;;move\s{0,20}\(;shutil.move is flawed and silently leaves the old file behind if the source and destination are on different file systems, see https://access.redhat.com/blogs/766093/posts/2592591;
7_php_type_unsafe_comparison;13758;;[^=]==[^=];The big problem with == is that in PHP (and some other languages), this comparison is not type safe. What you should always use is ===. For example a hash value that starts with 0E could be interpreted as an integer if you don't take care. There were real world bugs exploiting this issue already, think login form and comparing the hashed user password, what happens if you type in 0 as the password and brute force different usernames until a user has a hash which starts with 0E? Then there is also the question of different systems handling/doing Unicode Normalization (see for example https://gosecure.github.io/unicode-pentester-cheatsheet/ and https://www.gosecure.net/blog/2020/08/04/unicode-for-security-professionals/) or not: B\xC3\xBCcher and B\x75\xcc\x88cher is both UTF-8, but one is the character for a real Unicode u-Umlaut while the other is u[COMBINING DIAERESIS]. If the backend normalizes it could be that identifiers clash.;
